{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww25400\viewh13220\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The main thing I wanted to do with the testability version of Kwic was be able to control and observe the behavior of the system. Specifically, I wanted to control the flow of the program and limit structural complexity, while creating an environment that would allow future modifications (for instance, if I wanted to make list pairs or periods to breaks more efficient). The main thing I did was separate every \'93process\'94 into functions. This allowed me to create an architectural system where the program is designed linearly. This is similar to a pipe and filter software architecture. This is where data goes from function to function in order to be mutated and returned to the next function. The reason I chose this architecture is because it is a very simple sequence that would allow for easy to see modifications in any of the filters. I also did not want an overly complex architecture, as I feel that wouldn\'92t be easy to test at all. Kwic is a very simple program, so I felt that a simple and straightforward architecture would suffice. I also did not include the optimizations I included in the fastkwic, as that would only increase the complexity, which is not what this file is for. }